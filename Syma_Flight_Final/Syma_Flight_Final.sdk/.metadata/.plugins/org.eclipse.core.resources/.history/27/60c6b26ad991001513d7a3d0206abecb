#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "scugic_header.h"
#include "xdevcfg.h"
#include "devcfg_header.h"
#include "xdmaps.h"
#include "dmaps_header.h"
#include "xscutimer.h"
#include "scutimer_header.h"
#include "xscuwdt.h"
#include "scuwdt_header.h"
/*******************************************************************/

#define ADDR_OFFSET		0x4
#define PPM_BASE_ADDR	0x43C10000
#define SYMA_BASE_ADDR	0x43C00000
#define GRAUPNER_MS_DUR		(signed long long)(9596)

#include "xparameters.h"

#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"
#ifdef __arm__
#include "xil_printf.h"
#endif
#include "rcs_netconfig.h"

/* defined by each RAW mode application */
void print_app_header();
int start_application();
int transfer_data();

/* missing declaration in lwIP */
void lwip_init();

static struct netif server_netif;
struct netif *echo_netif;

void
print_ip(char *msg, struct ip_addr *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(struct ip_addr *ip, struct ip_addr *mask, struct ip_addr *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}

#ifdef __arm__
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
int ProgramSi5324(void);
int ProgramSfpPhy(void);
#endif
#endif
int setup_network()
{
	struct ip_addr ipaddr, netmask, gw;

	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] =
	RCS_ZEDBOARD_MACADDR;

	echo_netif = &server_netif;
#ifdef __arm__
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

	init_platform();

	/* initliaze IP addresses to be used */
	IP4_ADDR(&ipaddr,  RCS_ZEDBOARD_IPADDR_OCT1, RCS_ZEDBOARD_IPADDR_OCT2, RCS_ZEDBOARD_IPADDR_OCT3, RCS_ZEDBOARD_IPADDR_OCT4);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      RCS_ZEDBOARD_IPADDR_OCT1, RCS_ZEDBOARD_IPADDR_OCT2, RCS_ZEDBOARD_IPADDR_OCT3,  1);
	print_app_header();

	lwip_init();

  	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);
	print_ip_settings(&ipaddr, &netmask, &gw);

	/* start the application (web server, rxtest, txtest, etc..) */

	// that blocks
	start_application(echo_netif);


	/* never reached */
	cleanup_platform();

	return 0;
}


int main() 
{
	const static unsigned long throttle_min = 0x4170;	//*< The minimal counter value of the throttle using a Graupner mx-12 */
	const static unsigned long throttle_max = 0x8c68;	//*< The minimal counter value of the throttle using a Graupner mx-12 */
	const static signed long yaw_center = 26357;			//*< The center counter value of the yaw using a Graupner mx-12 */
	const static signed long nick_center = 26333;			//*< The center counter value of the nick using a Graupner mx-12 */
	const static signed long roll_center = 28973;			//*< The center counter value of the roll using a Graupner mx-12 */

	unsigned long unsigned_temp;						//*< Temporary variable, needed during the calculation for the throttle
	signed long signed_temp;							//*< Temporary variable, needed during the calculation for the yaw, nick and roll values */

	long * syma_ptr_cr = (long *) (SYMA_BASE_ADDR);
	long * syma_ptr_fly = (long *) (SYMA_BASE_ADDR+2*ADDR_OFFSET);
	long * ppm_1 = (long *) (PPM_BASE_ADDR);
	long * ppm_2 = (long *) (PPM_BASE_ADDR+ADDR_OFFSET);
	long * ppm_3 = (long *) (PPM_BASE_ADDR+2*ADDR_OFFSET);
	long * ppm_4 = (long *) (PPM_BASE_ADDR+3*ADDR_OFFSET);

	long nick_raw = 0;
	long roll_raw = 0;
	long throttle_raw = 0;
	long yaw_raw = 0;

	long nick = 0;
	long roll = 0;
	long throttle = 0;
	long yaw = 0;
	*syma_ptr_cr = 1;

	while(*ppm_3 < 0x8000);
	while(*ppm_3 > 0x4200);

	*syma_ptr_cr = 8;

	while(1) {
		nick_raw = *ppm_1;
		roll_raw = *ppm_2;
		throttle_raw = *ppm_3;
		yaw_raw = *ppm_4;

		// Convert Throttle
		if(throttle_raw < throttle_min) {
			throttle = 0;
		} else {
			unsigned_temp = throttle_raw - throttle_min;
			unsigned_temp = (unsigned_temp * 0xFF);
			unsigned_temp = unsigned_temp / (throttle_max-throttle_min);
			if(unsigned_temp > 0xFF) {
				throttle = 0xFF;
			}
			else {throttle = (unsigned char)(unsigned_temp);}
		}
		*syma_ptr_fly = (throttle << 24) + (*syma_ptr_fly & 0x00FFFFFF);

		//Convert YAW
		signed_temp = (signed long)(yaw_raw) - yaw_center;
		signed_temp = signed_temp * 0x7F;
		signed_temp = signed_temp / GRAUPNER_MS_DUR;
		if(signed_temp > 127) {yaw = 0x7F;}
		else if (signed_temp < -127) {yaw = 0xFF;}
		else if (signed_temp >= 0) {yaw = (unsigned char)(signed_temp);}
		else if (signed_temp < 0) {yaw = (unsigned char)((signed_temp ^ 0x7F)) ;}
		*syma_ptr_fly = (yaw << 8) + (*syma_ptr_fly & 0xFFFF00FF);

		//Convert NICK
		signed_temp = (signed long)(nick_raw) - nick_center;
		signed_temp = signed_temp * 0x7F;
		signed_temp = signed_temp / GRAUPNER_MS_DUR;
		if(signed_temp > 127) {nick = 0x7F;}
		else if (signed_temp < -127) {nick = 0xFF;}
		else if (signed_temp >= 0) {nick = (unsigned char)(signed_temp);}
		else if (signed_temp < 0) {nick = (unsigned char)((signed_temp ^ 0x7F)) ;}
		*syma_ptr_fly = (nick << 16) + (*syma_ptr_fly & 0xFF00FFFF);

		//Convert ROLL
		signed_temp = (signed long)(roll_raw) - roll_center;
		signed_temp = signed_temp * 0x7F;
		signed_temp = signed_temp / GRAUPNER_MS_DUR;
		if(signed_temp > 127) {roll = 0x7F;}
		else if (signed_temp < -127) {roll = 0xFF;}
		else if (signed_temp >= 0) {roll = (unsigned char)(signed_temp);}
		else if (signed_temp < 0) {roll = (unsigned char)((signed_temp ^ 0x7F)) ;}
		*syma_ptr_fly = (roll) + (*syma_ptr_fly & 0xFFFFFF00);

	}

	return 0;
}
